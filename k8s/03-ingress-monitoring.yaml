# =============================================================================
# Ingress Configuration for API Rate Limiter
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-rate-limiter-ingress
  namespace: api-rate-limiter
  annotations:
    # NGINX Ingress Controller specific annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # Rate limiting at ingress level (additional protection)
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # SSL/TLS configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Security headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    
    # Body size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    
spec:
  tls:
  - hosts:
    - api-rate-limiter.yourdomain.com
    secretName: api-rate-limiter-tls
  rules:
  - host: api-rate-limiter.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-rate-limiter-service
            port:
              number: 80

---
# =============================================================================
# ServiceMonitor for Prometheus (if using Prometheus Operator)
# =============================================================================
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: api-rate-limiter-servicemonitor
  namespace: api-rate-limiter
  labels:
    app: api-rate-limiter
    release: prometheus
spec:
  selector:
    matchLabels:
      app: api-rate-limiter
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
# =============================================================================
# PrometheusRule for Alerting
# =============================================================================
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: api-rate-limiter-alerts
  namespace: api-rate-limiter
  labels:
    app: api-rate-limiter
    release: prometheus
spec:
  groups:
  - name: api-rate-limiter.rules
    rules:
    # High error rate alert
    - alert: HighErrorRate
      expr: rate(http_requests_total{job="api-rate-limiter",status=~"5.."}[5m]) > 0.05
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "High error rate detected"
        description: "Error rate is {{ $value }} errors per second"
        
    # High rate limit violations
    - alert: HighRateLimitViolations
      expr: rate(rate_limit_violations_total[5m]) > 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High rate limit violations"
        description: "Rate limit violations: {{ $value }} per second"
        
    # Redis connection issues
    - alert: RedisConnectionDown
      expr: redis_connected_clients == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Redis connection down"
        description: "No Redis connections detected"
        
    # High memory usage
    - alert: HighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"api-rate-limiter-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage"
        description: "Memory usage is {{ $value | humanizePercentage }}"
        
    # Pod crash looping
    - alert: PodCrashLooping
      expr: increase(kube_pod_container_status_restarts_total{pod=~"api-rate-limiter-.*"}[1h]) > 5
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "Pod crash looping"
        description: "Pod {{ $labels.pod }} is crash looping"
