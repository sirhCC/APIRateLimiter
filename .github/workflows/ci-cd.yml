# CI/CD GitHub Actions Workflow
# Priority #5: Testing & Quality Infrastructure

name: API Rate Limiter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REDIS_VERSION: '7'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        redis-version: [6, 7]
    
    services:
      redis:
        image: redis:${{ matrix.redis-version }}-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for Redis
        run: |
          until nc -z localhost 6379; do
            echo "Waiting for Redis..."
            sleep 1
          done

      - name: Build TypeScript
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: Generate coverage report (for Node 18 only)
        if: matrix.node-version == '18' && matrix.redis-version == '7'
        run: npm run test:coverage
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18' && matrix.redis-version == '7'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

  build:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Docker image
        run: docker build -t api-rate-limiter:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-container -p 3000:3000 api-rate-limiter:${{ github.sha }}
          sleep 15
          curl -f http://localhost:3000/health || exit 1
          docker stop test-container

  chaos-engineering:
    name: Chaos Engineering Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run chaos engineering tests
        run: npm run test:chaos
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

  enhanced-tests:
    name: Enhanced Coverage Tests (Optional)
    runs-on: ubuntu-latest
    # This job doesn't block the main pipeline - it's optional
    continue-on-error: true
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run enhanced coverage tests
        run: npm run test:enhanced
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          NODE_ENV: test

  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [test, security, build, chaos-engineering]
    if: ${{ success() }}
    
    steps:
      - name: Notify success
        run: echo "✅ All tests passed! API Rate Limiter is ready for deployment."

  notify-failure:
    name: Failure Notification
    runs-on: ubuntu-latest
    needs: [test, security, build, chaos-engineering]
    if: ${{ failure() }}
    
    steps:
      - name: Notify failure
        run: echo "❌ Some tests failed. Please check the workflow logs."
